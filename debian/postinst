#!/bin/sh
# bashsupport disable=BP5007
# postinst script for pengwin-base
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

TMPDIR="/run/dpkg.pengwin-base.inst"
FLAGFILE="/etc/apt/.dist-upgrade"

# Check if Debian version needs upgrading
check_debian_version() {
	echo "Checking Debian version compatibility..."
	
	if [ ! -f /usr/lib/os-release ] || [ ! -f /etc/debian_version ]; then
		return 0
	fi
	
	# Extract VERSION_ID from os-release (e.g., "13")
	PENGWIN_VERSION_ID=$(grep "^VERSION_ID=" /usr/lib/os-release | cut -d'=' -f2 | tr -d '"')
	
	# Extract major version from debian_version (e.g., "13.0" -> "13")
	DEBIAN_VERSION=$(cat /etc/debian_version)
	
	# Handle both numeric versions (e.g., "13.0") and codename versions (e.g., "trixie/sid")
	if echo "$DEBIAN_VERSION" | grep -q "^[0-9]"; then
		DEBIAN_MAJOR_VERSION=$(echo "$DEBIAN_VERSION" | cut -d'.' -f1)
	else
		# For codename versions, we can't easily extract a numeric version
		# so we'll skip the check
		DEBIAN_MAJOR_VERSION=""
	fi
	
	# Compare major versions
	if [ -n "$PENGWIN_VERSION_ID" ] && [ -n "$DEBIAN_MAJOR_VERSION" ]; then
		if [ "$PENGWIN_VERSION_ID" != "$DEBIAN_MAJOR_VERSION" ]; then
			echo "Debian version mismatch detected (Pengwin: $PENGWIN_VERSION_ID, System: $DEBIAN_MAJOR_VERSION)"
			echo "Creating flag file to trigger dist-upgrade on next pengwin-setup run"
			touch "${FLAGFILE}"
		else
			echo "Debian version is up to date (version $PENGWIN_VERSION_ID)"
		fi
	fi
}
case "$1" in
	configure)
		echo "Symlinking /etc/dpkg/origins/pengwin to default"
		ln -sf /etc/dpkg/origins/pengwin /etc/dpkg/origins/default

		### Whitewater Foundry GPG Key install
		echo "Installing Whitewater Foundry GPG keys..."

		setup_gpgkey="https://packagecloud.io/whitewaterfoundry/pengwin-setup/gpgkey"
		base_gpgkey="https://packagecloud.io/whitewaterfoundry/pengwin-base/gpgkey"
		wslu_gpgkey="https://packagecloud.io/whitewaterfoundry/wslu/gpgkey"

		keyrings_path="/etc/apt/keyrings"
    mkdir -p "${keyrings_path}"

		setup_gpgkey_file="${keyrings_path}/whitewaterfoundry_pengwin-base-archive-keyring.gpg"
		base_gpgkey_file="${keyrings_path}/whitewaterfoundry_pengwin-setup-archive-keyring.gpg"
		wslu_gpgkey_file="${keyrings_path}/whitewaterfoundry_wslu-archive-keyring.gpg"

		curl -fsSL "${base_gpgkey}" 	 | gpg --dearmor >"${setup_gpgkey_file}" 2>/dev/null && chmod 0644 "${setup_gpgkey_file}"
		curl -fsSL "${setup_gpgkey}"	 | gpg --dearmor >"${base_gpgkey_file}" 2>/dev/null && chmod 0644 "${base_gpgkey_file}"
		curl -fsSL "${wslu_gpgkey}"	   | gpg --dearmor >"${wslu_gpgkey_file}" 2>/dev/null && chmod 0644 "${wslu_gpgkey_file}"

		chmod 755 /usr/local/bin/cmd-exe
		chmod 755 /usr/local/bin/legacy_wslupath
		chmod 755 /usr/local/bin/wsl_change_checker
		chmod 755 /usr/local/bin/libgl-change-checker
		chmod 755 /usr/local/bin/pengwin-load-vgem-module
		chmod 755 /usr/local/bin/switch2dev
		chmod 755 /usr/local/bin/switch2next
		chmod 755 /usr/local/bin/pengwin-help
		chmod 755 /usr/local/bin/winpwsh-exe
		chmod 755 /usr/local/bin/winpwsh-int-exe
		chmod 755 /usr/local/bin/wslsystemctl
		chmod 755 /usr/local/bin/wsljournalctl
		chmod 755 /usr/local/bin/start-systemd
    chmod 755 /usr/local/bin/check_x11_socket

		chmod u+s "$(command -v ping)"

		echo "%sudo   ALL=NOPASSWD: /usr/local/bin/wsl_change_checker" | EDITOR='tee' visudo --quiet --file=/etc/sudoers.d/pengwin-wsl-profile
		echo "%sudo   ALL=NOPASSWD: /usr/local/bin/libgl-change-checker" | EDITOR='tee -a' visudo --quiet --file=/etc/sudoers.d/pengwin-wsl-profile
		echo "%sudo   ALL=NOPASSWD: /usr/local/bin/check_x11_socket" | EDITOR='tee -a' visudo --quiet --file=/etc/sudoers.d/pengwin-wsl-profile

		echo "adding permission of execution to scripts into update-motd.d folder"
		chmod +x /etc/update-motd.d/00-header
		chmod +x /etc/update-motd.d/20-help
		chmod +x /etc/update-motd.d/30-pengwin-setup
		chmod +x /etc/update-motd.d/40-environment

		echo " Done!"
		###

		# Remove temporary directory
		echo "Cleaning up pengwin-base temporary install-dir"
		rm -rf ${TMPDIR}

		# Check if Debian version needs upgrading
		check_debian_version

		# This is a new install, create dist-upgrade flag file
		# touch "${FLAGFILE}"
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
		# Silent, as this directory may not exist
		# echo "Cleaning up pengwin-base temporary install dir"
		rm -rf ${TMPDIR}
	;;

	*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
